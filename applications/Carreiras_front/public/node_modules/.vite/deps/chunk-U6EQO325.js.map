{
  "version": 3,
  "sources": ["../../vuetify/src/components/VMenu/VMenu.tsx"],
  "sourcesContent": ["// Styles\nimport './VMenu.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\nimport { makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useRtl } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\n\n// Utilities\nimport {\n  computed,\n  inject,\n  mergeProps,\n  nextTick,\n  onBeforeUnmount,\n  onDeactivated,\n  provide,\n  ref,\n  shallowRef,\n  watch,\n} from 'vue'\nimport { VMenuSymbol } from './shared'\nimport {\n  focusableChildren,\n  focusChild,\n  genericComponent,\n  getNextElement,\n  getUid,\n  isClickInsideElement,\n  omit,\n  propsFactory,\n  useRender,\n} from '@/util'\n\n// Types\nimport type { Component } from 'vue'\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const makeVMenuProps = propsFactory({\n  // TODO\n  // disableKeys: Boolean,\n  id: String,\n  submenu: Boolean,\n\n  ...omit(makeVOverlayProps({\n    closeDelay: 250,\n    closeOnContentClick: true,\n    locationStrategy: 'connected' as const,\n    location: undefined,\n    openDelay: 300,\n    scrim: false,\n    scrollStrategy: 'reposition' as const,\n    transition: { component: VDialogTransition as Component },\n  }), ['absolute']),\n}, 'VMenu')\n\nexport const VMenu = genericComponent<OverlaySlots>()({\n  name: 'VMenu',\n\n  props: makeVMenuProps(),\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n    const { isRtl } = useRtl()\n\n    const uid = getUid()\n    const id = computed(() => props.id || `v-menu-${uid}`)\n\n    const overlay = ref<VOverlay>()\n\n    const parent = inject(VMenuSymbol, null)\n    const openChildren = shallowRef(new Set<number>())\n    provide(VMenuSymbol, {\n      register () {\n        openChildren.value.add(uid)\n      },\n      unregister () {\n        openChildren.value.delete(uid)\n      },\n      closeParents (e) {\n        setTimeout(() => {\n          if (!openChildren.value.size &&\n            !props.persistent &&\n            (e == null || (overlay.value?.contentEl && !isClickInsideElement(e, overlay.value.contentEl)))\n          ) {\n            isActive.value = false\n            parent?.closeParents()\n          }\n        }, 40)\n      },\n    })\n\n    onBeforeUnmount(() => parent?.unregister())\n    onDeactivated(() => isActive.value = false)\n\n    async function onFocusIn (e: FocusEvent) {\n      const before = e.relatedTarget as HTMLElement | null\n      const after = e.target as HTMLElement | null\n\n      await nextTick()\n\n      if (\n        isActive.value &&\n        before !== after &&\n        overlay.value?.contentEl &&\n        // We're the topmost menu\n        overlay.value?.globalTop &&\n        // It isn't the document or the menu body\n        ![document, overlay.value.contentEl].includes(after!) &&\n        // It isn't inside the menu body\n        !overlay.value.contentEl.contains(after)\n      ) {\n        const focusable = focusableChildren(overlay.value.contentEl)\n        focusable[0]?.focus()\n      }\n    }\n\n    watch(isActive, val => {\n      if (val) {\n        parent?.register()\n        document.addEventListener('focusin', onFocusIn, { once: true })\n      } else {\n        parent?.unregister()\n        document.removeEventListener('focusin', onFocusIn)\n      }\n    })\n\n    function onClickOutside (e: MouseEvent) {\n      parent?.closeParents(e)\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      if (props.disabled) return\n\n      if (e.key === 'Tab' || (e.key === 'Enter' && !props.closeOnContentClick)) {\n        if (\n          e.key === 'Enter' &&\n          ((e.target instanceof HTMLTextAreaElement) ||\n          (e.target instanceof HTMLInputElement && !!e.target.closest('form')))\n        ) return\n        if (e.key === 'Enter') e.preventDefault()\n\n        const nextElement = getNextElement(\n          focusableChildren(overlay.value?.contentEl as Element, false),\n          e.shiftKey ? 'prev' : 'next',\n          (el: HTMLElement) => el.tabIndex >= 0\n        )\n        if (!nextElement) {\n          isActive.value = false\n          overlay.value?.activatorEl?.focus()\n        }\n      } else if (props.submenu && e.key === (isRtl.value ? 'ArrowRight' : 'ArrowLeft')) {\n        isActive.value = false\n        overlay.value?.activatorEl?.focus()\n      }\n    }\n\n    function onActivatorKeydown (e: KeyboardEvent) {\n      if (props.disabled) return\n\n      const el = overlay.value?.contentEl\n      if (el && isActive.value) {\n        if (e.key === 'ArrowDown') {\n          e.preventDefault()\n          e.stopImmediatePropagation()\n          focusChild(el, 'next')\n        } else if (e.key === 'ArrowUp') {\n          e.preventDefault()\n          e.stopImmediatePropagation()\n          focusChild(el, 'prev')\n        } else if (props.submenu) {\n          if (e.key === (isRtl.value ? 'ArrowRight' : 'ArrowLeft')) {\n            isActive.value = false\n          } else if (e.key === (isRtl.value ? 'ArrowLeft' : 'ArrowRight')) {\n            e.preventDefault()\n            focusChild(el, 'first')\n          }\n        }\n      } else if (\n        props.submenu\n          ? e.key === (isRtl.value ? 'ArrowLeft' : 'ArrowRight')\n          : ['ArrowDown', 'ArrowUp'].includes(e.key)\n      ) {\n        isActive.value = true\n        e.preventDefault()\n        setTimeout(() => setTimeout(() => onActivatorKeydown(e)))\n      }\n    }\n\n    const activatorProps = computed(() =>\n      mergeProps({\n        'aria-haspopup': 'menu',\n        'aria-expanded': String(isActive.value),\n        'aria-owns': id.value,\n        onKeydown: onActivatorKeydown,\n      }, props.activatorProps)\n    )\n\n    useRender(() => {\n      const overlayProps = VOverlay.filterProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          id={ id.value }\n          class={[\n            'v-menu',\n            props.class,\n          ]}\n          style={ props.style }\n          { ...overlayProps }\n          v-model={ isActive.value }\n          absolute\n          activatorProps={ activatorProps.value }\n          location={ props.location ?? (props.submenu ? 'end' : 'bottom') }\n          onClick:outside={ onClickOutside }\n          onKeydown={ onKeydown }\n          { ...scopeId }\n        >\n          {{\n            activator: slots.activator,\n            default: (...args) => (\n              <VDefaultsProvider root=\"VMenu\">\n                { slots.default?.(...args) }\n              </VDefaultsProvider>\n            ),\n          }}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({ id, Î¨openChildren: openChildren }, overlay)\n  },\n})\n\nexport type VMenu = InstanceType<typeof VMenu>\n"],
  "mappings": "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",
  "names": ["makeVMenuProps", "propsFactory", "id", "String", "submenu", "Boolean", "omit", "makeVOverlayProps", "closeDelay", "closeOnContentClick", "locationStrategy", "location", "undefined", "openDelay", "scrim", "scrollStrategy", "transition", "component", "VDialogTransition", "VMenu", "genericComponent", "name", "props", "emits", "value", "setup", "_ref", "slots", "isActive", "useProxiedModel", "scopeId", "useScopeId", "isRtl", "useRtl", "uid", "getUid", "computed", "overlay", "ref", "parent", "inject", "VMenuSymbol", "openChildren", "shallowRef", "Set", "provide", "register", "add", "unregister", "delete", "closeParents", "e", "setTimeout", "size", "persistent", "contentEl", "isClickInsideElement", "onBeforeUnmount", "onDeactivated", "onFocusIn", "before", "relatedTarget", "after", "target", "nextTick", "globalTop", "document", "includes", "contains", "focusable", "focusableChildren", "focus", "watch", "val", "addEventListener", "once", "removeEventListener", "onClickOutside", "onKeydown", "disabled", "key", "HTMLTextAreaElement", "HTMLInputElement", "closest", "preventDefault", "nextElement", "getNextElement", "shiftKey", "el", "tabIndex", "activatorEl", "onActivatorKeydown", "stopImmediatePropagation", "focusChild", "activatorProps", "mergeProps", "useRender", "overlayProps", "VOverlay", "filterProps", "_createVNode", "_mergeProps", "class", "style", "$event", "activator", "default", "_len", "arguments", "length", "args", "Array", "_key", "VDefaultsProvider", "forwardRefs", "Î¨openChildren"]
}
